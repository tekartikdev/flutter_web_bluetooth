import 'dart:io';

// source: https://www.bluetooth.com/specifications/assigned-numbers/

Future<int> main() async {
  final dir = File(Platform.script.toFilePath()).parent;
  final servicesFile = File("${dir.path}/services_uuids.csv");
  final characteristicsFile = File("${dir.path}/characteristics_uuids.csv");
  final outputFile = File("${dir.path}/output.dart");

  if (await outputFile.exists()) {
    stderr.writeln("Output file already exists!");
    stderr.write("Overwrite? (Y/n)");
    final line = stdin.readLineSync();
    if (line?.toLowerCase() == "n") {
      exit(3);
    }
    await outputFile.delete();
  }

  const outputFileHeader =
      "/// This file has been automatically generated by the script\n"
      "/// scripts/generate_default_uuids.dart. If you need more uuids please change\n"
      "/// the csv files and regenerate the file.\n"
      "\n"
      "part of flutter_web_bluetooth;\n"
      "\n"
      "abstract class BluetoothDefaultUUIDS {\n"
      "    final String name;\n"
      "    final String uuid16;\n"
      "    final String uuid;\n"
      "    final int ordinal;\n"
      "\n"
      "    const BluetoothDefaultUUIDS._(this.name, this.uuid16, this.uuid, this.ordinal);\n"
      "}\n\n";

  var servicesUuidClass =
      "class BluetoothDefaultServiceUUIDS extends BluetoothDefaultUUIDS {\n"
      "\n"
      "    const BluetoothDefaultServiceUUIDS._(String name, String uuid16, String uuid, int ordinal): super._(name, uuid16, uuid, ordinal);\n"
      "\n";

  var servicesUuidValues = "[\n";
  await readThroughFile(servicesFile, (holder) {
    servicesUuidClass +=
        "    static const ${holder.variableName} = BluetoothDefaultServiceUUIDS._('${holder.name}', "
        "'${holder.uuid16}', "
        "'${holder.uuid}', "
        "${holder.ordinal});\n";
    servicesUuidValues += "        ${holder.variableName},\n";
  });

  servicesUuidValues += "    ];\n";
  servicesUuidClass += "\n\n    static const VALUES = $servicesUuidValues";
  servicesUuidClass += "}\n\n";

  var characteristicUuidClass =
      "class BluetoothDefaultCharacteristicUUIDS extends BluetoothDefaultUUIDS {\n"
      "\n"
      "    const BluetoothDefaultCharacteristicUUIDS._(String name, String uuid16, String uuid, int ordinal): super._(name, uuid16, uuid, ordinal);\n"
      "\n";

  var characteristicUuidValues = "[\n";
  await readThroughFile(characteristicsFile, (holder) {
    characteristicUuidClass +=
        "    static const ${holder.variableName} = BluetoothDefaultCharacteristicUUIDS._('${holder.name}', "
        "'${holder.uuid16}', "
        "'${holder.uuid}', "
        "${holder.ordinal});\n";
    characteristicUuidValues += "        ${holder.variableName},\n";
  });

  characteristicUuidValues += "    ];\n";
  characteristicUuidClass +=
      "\n\n    static const VALUES = $characteristicUuidValues";
  characteristicUuidClass += "}\n\n";

  await outputFile.create();
  await outputFile.writeAsString(outputFileHeader, mode: FileMode.writeOnly);
  await outputFile.writeAsString(servicesUuidClass,
      mode: FileMode.writeOnlyAppend);
  await outputFile.writeAsString(characteristicUuidClass,
      mode: FileMode.writeOnlyAppend);
  print('Done');
  return 0;
}

Future<void> readThroughFile(
    File inputFile, void Function(CharacteristicHolder holder) forEach) async {
  final lines = await inputFile.readAsLines();
  for (int i = 0; i < lines.length; i++) {
    final columns = lines[i].split(",");
    if (columns.length != 2) {
      stderr.writeln("There should be 2 columns at line ${i + 1}");
      exit(4);
    }
    final uuidInt = int.parse(columns[0].replaceFirst("0x", ""), radix: 16);
    final name = columns[1].replaceAll("\r", "").replaceAll("\n", "").trim();
    final variableName = name
        .toUpperCase()
        .replaceAll(" ", "_")
        .replaceAll("-", "_")
        .replaceAll(".", "_");
    final uuid16 = uuidInt.toRadixString(16).toLowerCase().padLeft(4, '0');
    final uuid =
        '${uuidInt.toRadixString(16).toLowerCase().padLeft(8, '0')}-0000-1000-8000-00805f9b34fb';
    forEach(CharacteristicHolder(variableName, name, uuid16, uuid, i));
  }
}

class CharacteristicHolder {
  final String variableName;
  final String name;
  final String uuid16;
  final String uuid;
  final int ordinal;

  CharacteristicHolder(
      this.variableName, this.name, this.uuid16, this.uuid, this.ordinal);
}
